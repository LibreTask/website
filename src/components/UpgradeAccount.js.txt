/*
 * @link https://www.algernon.io/
 * @license https://github.com/AlgernonLabs/algernon/blob/master/LICENSE.md
 */

import React, { Component } from "react";
import { browserHistory } from "react-router";
import { connect } from "react-redux";

import StripeCheckout from "react-stripe-checkout";
import { Grid, Row, Col, Image, Table, Button } from "react-bootstrap";

import * as UserActions from "../actions/user";
import * as ProfileController from "../controllers/profile";

import AppConstants from "../constants";
import AppStyles from "../styles";

import * as Client from "../middleware/client";

const styles = {
  content: {
    margin: "auto",
    color: "#272727",
    fontSize: "130%",
    paddingLeft: 0,
    paddingRight: 0
  },
  rowElementContent: {
    display: "inline",
    margin: "auto",
    padding: 20
  },
  rowElementFont: {
    paddingTop: 10,
    fontSize: "125%",
    fontWeight: "bold",
    margin: "auto",
    textAlign: "center"
  },
  rowElementImage: {
    verticalAlign: "top",
    margin: "auto",
    textAlign: "center"
  },
  pricingTable: {
    minWidth: 320,
    maxWidth: 400,
    minHeight: 385,
    maxHeight: 400,
    width: "90%",
    backgroundColor: AppStyles.backgroundColor,
    textAlign: "center",
    margin: "auto",

    // required for rounded corners
    borderRadius: 5,
    overflow: "hidden"
  },
  greenCheck: {
    fontSize: "160%",
    color: "green"
  },
  tableHeader: {
    fontSize: "120%",
    fontWeight: "bold",
    textAlign: "center"
  },
  whiteSectionText: {
    color: AppStyles.textOnMainColor,
    fontSize: "200%",
    margin: "auto",
    textAlign: "center",
    paddingTop: 5,
    paddingBottom: 5
  },
  blackSectionText: {
    color: "black",
    fontSize: "200%",
    margin: "auto",
    textAlign: "center",
    paddingTop: 5,
    paddingBottom: 5
  },
  blackRow: {
    backgroundColor: "black",
    margin: "auto",
    width: "100%",
    textAlign: "center",
    paddingTop: 5,
    paddingBottom: 5
  },
  whiteRow: {
    backgroundColor: AppStyles.backgroundColor,
    margin: "auto",
    width: "100%",
    textAlign: "center",
    paddingTop: 5,
    paddingBottom: 5
  },
  column: {
    float: "none",
    display: "inline-flex",
    verticalAlign: "middle"
  },
  whiteVisualBreakRow: {
    margin: "auto",
    width: "100%",
    textAlign: "center",
    paddingTop: 15,
    paddingBottom: 15,
    backgroundColor: AppStyles.backgroundColor
  },
  blackVisualBreakRow: {
    margin: "auto",
    width: "100%",
    textAlign: "center",
    paddingTop: 15,
    paddingBottom: 15,
    backgroundColor: "black"
  },
  premiumText: {
    fontSize: "110%",
    color: "green"
  }
};

class UpgradeAccount extends Component {
  constructor(props) {
    super(props);

    this.state = {
      successMessage: "",
      errorMessage: ""
    };
  }

  componentDidMount() {
    if (!this.props.isLoggedIn) {
      browserHistory.push("/login"); // login required
    }

    if (this._hasPremiumSubscription()) {
      // do not show upgrade page if already upgraded
      browserHistory.push("/");
    }
  }

  // TODO - move to utils-or-similar
  _hasPremiumSubscription = () => {
    let today = new Date();

    return (
      this.props.profile &&
      this.props.profile.currentPlan &&
      this.props.profile.currentPlan === "premium" &&
      new Date(this.props.profile.planExpirationDateTimeUtc) > today
    );
  };

  /*
    This function assumes that an errorMessage and
    successMessage cannot exist simultaneously.
  */
  _constructMessageBanner = () => {
    if (this.state.errorMessage) {
      return (
        <div style={AppStyles.errorBanner}>
          {this.state.errorMessage}
        </div>
      );
    }
    if (this.state.successMessage) {
      return (
        <div style={AppStyles.successBanner}>
          {this.state.successMessage}
        </div>
      );
    } else {
      return <div />;
    }
  };

  _onPaymentSubmission = token => {
    let stripeToken = token.id;
    let paymentMethodId = token.card.id; // auto-generated credit card identifier

    this.setState(
      {
        successMessage: "",
        errorMessage: ""
      },
      () => {
        Client.upgradeAccount(this.props.profile, stripeToken, paymentMethodId)
          .then(response => {
            
            

            if (response.errorCode) {
              this.setState(
                {
                  errorMessage: response.errorMessage
                },
                () => {
                  setTimeout(() => {
                    this.setState({ errorMessage: "" });
                  }, 1000 * 3); // only display error message for three seconds
                }
              );
            } else {
              let updatedProfile = this.props.profile;
              updatedProfile.currentPlan = "premium";
              this.props.updateProfile(updatedProfile);
              ProfileController.createOrUpdateProfile(updatedProfile);

              this.setState(
                {
                  successMessage: "Welcome to Algernon Premium!"
                },
                () => {
                  setTimeout(() => {
                    this.setState({ successMessage: "" });
                    browserHistory.push("/profile"); // login required
                  }, 1000 * 3); // only display success message for three seconds
                }
              );
            }
          })
          .catch(error => {
            this.setState(
              {
                errorMessage: error.message
              },
              () => {
                setTimeout(() => {
                  this.setState({ errorMessage: "" });
                }, 1000 * 3); // only display error message for three seconds
              }
            );
          });
      }
    );
  };

  render() {
    return (
      <div style={AppStyles.homePage}>

        {this._constructMessageBanner()}

        <div>
          <Grid fluid style={styles.content}>
            <Row style={styles.whiteVisualBreakRow} />
            <Row style={styles.whiteRow}>
              <Col>
                <div style={styles.blackSectionText}>
                  Premium Features
                </div>
              </Col>
            </Row>
            <Row style={styles.whiteRow}>
              <Col style={styles.column} sm={8} md={4}>
                <div style={styles.rowElementContent}>
                  <div style={styles.rowElementImage}>
                    <Image
                      alt="Algernon lists interface"
                      src="../images/list.png"
                      rounded
                    />
                  </div>

                  <div style={styles.rowElementFont}>
                    Organize your goals
                  </div>
                </div>
              </Col>
              <Col style={styles.column} sm={8} md={4}>
                <div style={styles.rowElementContent}>
                  <div style={styles.rowElementImage}>
                    <Image
                      alt="Algernon sync diagram"
                      src="../images/sync.png"
                      rounded
                    />
                  </div>

                  <div style={styles.rowElementFont}>
                    Sync across devices
                  </div>
                </div>
              </Col>
            </Row>
            <Row style={styles.whiteRow}>
              <Col style={styles.column} sm={8} md={4}>
                <div style={styles.rowElementContent}>
                  <div style={styles.rowElementImage}>
                    <Image
                      alt="Algernon backup diagram"
                      src="../images/backup.png"
                      rounded
                    />
                  </div>

                  <div style={styles.rowElementFont}>
                    Backup unlimited tasks
                  </div>
                </div>
              </Col>
              <Col style={styles.column} sm={8} md={4}>
                <div style={styles.rowElementContent}>
                  <div style={styles.rowElementImage}>
                    <Image
                      alt="Algernon open source diagram"
                      src="../images/opensource.png"
                      rounded
                    />
                  </div>

                  <div style={styles.rowElementFont}>
                    View the source code
                  </div>
                </div>
              </Col>
            </Row>
            <Row style={styles.whiteVisualBreakRow} />
            <Row style={styles.blackVisualBreakRow} />
            <Row style={styles.blackRow}>
              <Col>
                <div style={styles.whiteSectionText}>
                  Pricing
                </div>
              </Col>
            </Row>
            <Row style={styles.blackRow}>
              <Col>
                <div style={styles.rowElementImage}>

                  <Table striped bordered condensed style={styles.pricingTable}>
                    <thead>
                      <tr>
                        <th style={styles.tableHeader}>Features</th>
                        <th style={styles.tableHeader}>Basic</th>
                        <th style={styles.tableHeader}>Premium</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr>
                        <td>Mobile and Desktop apps</td>
                        <td style={styles.greenCheck}>✓</td>
                        <td style={styles.greenCheck}>✓</td>
                      </tr>
                      <tr>
                        <td>Open source</td>
                        <td style={styles.greenCheck}>✓</td>
                        <td style={styles.greenCheck}>✓</td>
                      </tr>
                      <tr>
                        <td>14 Day Money-back Guarantee</td>
                        <td style={styles.greenCheck}>✓</td>
                        <td style={styles.greenCheck}>✓</td>
                      </tr>
                      <tr>
                        <td>Sync across devices</td>
                        <td />
                        <td style={styles.greenCheck}>✓</td>
                      </tr>
                      <tr>
                        <td>Unlimited backup</td>
                        <td />
                        <td style={styles.greenCheck}>✓</td>
                      </tr>
                      <tr>
                        <td>Price</td>
                        <td>Free</td>
                        <td>
                          <strike>
                            ${AppConstants.PREMIUM_COST_IN_DOLLARS} / year
                          </strike>
                          <br />
                          <span style={styles.premiumText}>
                            Free during beta
                          </span>
                        </td>
                      </tr>
                    </tbody>
                  </Table>
                </div>
              </Col>
            </Row>
            <Row style={styles.blackVisualBreakRow} />
            <Row style={styles.whiteVisualBreakRow} />
            <Row style={styles.whiteRow}>
              <Col>
                <div style={styles.blackSectionText}>
                  Get it now
                </div>
                <div>
                  Premium has a 14 day money-back guarantee.
                </div>
              </Col>
            </Row>
            <Row style={styles.whiteRow}>
              <Col style={styles.column}>
                <div style={AppStyles.centerContent}>
                  {/*
                    Remember me just saves info locally. We do not find that
                    useful, so do not do it.
                  */}
                  <StripeCheckout
                    token={this._onPaymentSubmission}
                    amount={AppConstants.PREMIUM_COST_IN_CENTS}
                    email={
                      this.props.profile && this.props.profile.email
                        ? this.props.profile.email
                        : ""
                    }
                    allowRememberMe={false}
                    name="Algernon"
                    description="Premium"
                    image={
                      "https://stripe.com/img/documentation/checkout/marketplace.png"
                    }
                    locale="auto"
                    zipCode={true}
                    stripeKey="pk_test_yv9mjFfNwC5ac7RHCbCg3jgf"
                  >
                    <Button
                      className="form_button"
                      style={AppStyles.formButton}
                      bsStyle="primary"
                      bsSize="large"
                    >
                      Get Premium
                    </Button>
                  </StripeCheckout>

                  <form
                    id="checkout-form"
                    action="/api/v1/user/upgrade-account"
                    method="POST"
                  />
                </div>
              </Col>
            </Row>
          </Grid>
        </div>
        <br />

      </div>
    );
  }
}

const mapStateToProps = state => ({
  profile: state.user.profile,
  isLoggedIn: state.user.isLoggedIn
});

const mapDispatchToProps = {
  updateProfile: UserActions.updateProfile
};

export default connect(mapStateToProps, mapDispatchToProps)(UpgradeAccount);
